using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    private CharacterController _controller;
    [SerializeField]
    float groundSpeed = 3.0f;
    [SerializeField]
    public float gravityStrength = 9.81f;
    [SerializeField]
    float jumpSpeed = 1f;
    [SerializeField]
    float aerialSpeed = 2f;

    bool canJump = false;
    bool onWall = false;
    bool canDoubleJump = false;
    float verticalVelocity;
    Vector3 velocity;
    Vector3 groundedVelocity;
    Vector3 normal;


    void Start()
    {
        _controller = GetComponent<CharacterController>();  
    }

    void Update()
    {
        Vector3 myVector = Vector3.zero; // store position
        Vector3 input = Vector3.zero; // store input

        input.x = Input.GetAxis("Horizontal");
        input = Vector3.ClampMagnitude(input, 1f);

        // apply movement on character based on ground or aerial
        if (_controller.isGrounded)
        {
            canDoubleJump = true;
            myVector = input;
            myVector *= groundSpeed;
        }
        else
        {
            myVector = groundedVelocity;
            myVector += input * aerialSpeed;
        }

        myVector = Vector3.ClampMagnitude(myVector, groundSpeed);
        myVector = myVector  * Time.deltaTime;
        verticalVelocity = verticalVelocity - gravityStrength * Time.deltaTime;

        //calculate the jumping and walljumping
        if (Input.GetButtonDown("Jump"))
        {
            if (onWall)
            {
                Vector3 reflection = Vector3.Reflect(velocity, normal); //reflect the normal of the wall
                Vector3 projected = Vector3.ProjectOnPlane(reflection, Vector3.up); //lock the Y axis to evade walljump in the same wall
                groundedVelocity = projected.normalized*groundSpeed + normal*aerialSpeed;
            }
            if (canJump)
            {
                verticalVelocity += jumpSpeed;
            }
            else if (canDoubleJump)
            {
                canDoubleJump = false;
                verticalVelocity += jumpSpeed;
            }
            
        }
       
        myVector.y = verticalVelocity * Time.deltaTime;


        CollisionFlags flags = _controller.Move(myVector);
        velocity = myVector / Time.deltaTime;
        print(velocity);
        if ((flags & CollisionFlags.Below) != 0)
        { 
            groundedVelocity = Vector3.ProjectOnPlane (velocity, Vector3.up);
            canJump = true;
            onWall = false;
            verticalVelocity = 0f;
        }
        else if ((flags & CollisionFlags.Sides) != 0)
        {
            canJump = true;
            onWall = true;
        }
        else
        {
            canJump = false;
            onWall = false;
        }
    }
    private void OnControllerColliderHit(ControllerColliderHit hit)
    {
        normal = hit.normal;
        
    }
}
